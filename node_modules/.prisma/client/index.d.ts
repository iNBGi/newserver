
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Recipes
 * 
 */
export type Recipes = $Result.DefaultSelection<Prisma.$RecipesPayload>
/**
 * Model Recipeinformation
 * 
 */
export type Recipeinformation = $Result.DefaultSelection<Prisma.$RecipeinformationPayload>
/**
 * Model Exercises
 * 
 */
export type Exercises = $Result.DefaultSelection<Prisma.$ExercisesPayload>
/**
 * Model Exerciseinformation
 * 
 */
export type Exerciseinformation = $Result.DefaultSelection<Prisma.$ExerciseinformationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.recipes`: Exposes CRUD operations for the **Recipes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipes
    * const recipes = await prisma.recipes.findMany()
    * ```
    */
  get recipes(): Prisma.RecipesDelegate<ExtArgs>;

  /**
   * `prisma.recipeinformation`: Exposes CRUD operations for the **Recipeinformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Recipeinformations
    * const recipeinformations = await prisma.recipeinformation.findMany()
    * ```
    */
  get recipeinformation(): Prisma.RecipeinformationDelegate<ExtArgs>;

  /**
   * `prisma.exercises`: Exposes CRUD operations for the **Exercises** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exercises
    * const exercises = await prisma.exercises.findMany()
    * ```
    */
  get exercises(): Prisma.ExercisesDelegate<ExtArgs>;

  /**
   * `prisma.exerciseinformation`: Exposes CRUD operations for the **Exerciseinformation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Exerciseinformations
    * const exerciseinformations = await prisma.exerciseinformation.findMany()
    * ```
    */
  get exerciseinformation(): Prisma.ExerciseinformationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.3.0
   * Query Engine version: aebc046ce8b88ebbcb45efe31cbe7d06fd6abc0a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Recipes: 'Recipes',
    Recipeinformation: 'Recipeinformation',
    Exercises: 'Exercises',
    Exerciseinformation: 'Exerciseinformation'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'recipes' | 'recipeinformation' | 'exercises' | 'exerciseinformation'
      txIsolationLevel: never
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.UserFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.UserAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Recipes: {
        payload: Prisma.$RecipesPayload<ExtArgs>
        fields: Prisma.RecipesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          findFirst: {
            args: Prisma.RecipesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          findMany: {
            args: Prisma.RecipesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>[]
          }
          create: {
            args: Prisma.RecipesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          createMany: {
            args: Prisma.RecipesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecipesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          update: {
            args: Prisma.RecipesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          deleteMany: {
            args: Prisma.RecipesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecipesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecipesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipesPayload>
          }
          aggregate: {
            args: Prisma.RecipesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipes>
          }
          groupBy: {
            args: Prisma.RecipesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RecipesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.RecipesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.RecipesCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipesCountAggregateOutputType> | number
          }
        }
      }
      Recipeinformation: {
        payload: Prisma.$RecipeinformationPayload<ExtArgs>
        fields: Prisma.RecipeinformationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RecipeinformationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RecipeinformationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          findFirst: {
            args: Prisma.RecipeinformationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RecipeinformationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          findMany: {
            args: Prisma.RecipeinformationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>[]
          }
          create: {
            args: Prisma.RecipeinformationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          createMany: {
            args: Prisma.RecipeinformationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RecipeinformationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          update: {
            args: Prisma.RecipeinformationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          deleteMany: {
            args: Prisma.RecipeinformationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RecipeinformationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RecipeinformationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RecipeinformationPayload>
          }
          aggregate: {
            args: Prisma.RecipeinformationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRecipeinformation>
          }
          groupBy: {
            args: Prisma.RecipeinformationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RecipeinformationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.RecipeinformationFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.RecipeinformationAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.RecipeinformationCountArgs<ExtArgs>,
            result: $Utils.Optional<RecipeinformationCountAggregateOutputType> | number
          }
        }
      }
      Exercises: {
        payload: Prisma.$ExercisesPayload<ExtArgs>
        fields: Prisma.ExercisesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExercisesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExercisesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          findFirst: {
            args: Prisma.ExercisesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExercisesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          findMany: {
            args: Prisma.ExercisesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>[]
          }
          create: {
            args: Prisma.ExercisesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          createMany: {
            args: Prisma.ExercisesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExercisesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          update: {
            args: Prisma.ExercisesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          deleteMany: {
            args: Prisma.ExercisesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExercisesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExercisesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExercisesPayload>
          }
          aggregate: {
            args: Prisma.ExercisesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExercises>
          }
          groupBy: {
            args: Prisma.ExercisesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExercisesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ExercisesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ExercisesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ExercisesCountArgs<ExtArgs>,
            result: $Utils.Optional<ExercisesCountAggregateOutputType> | number
          }
        }
      }
      Exerciseinformation: {
        payload: Prisma.$ExerciseinformationPayload<ExtArgs>
        fields: Prisma.ExerciseinformationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExerciseinformationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExerciseinformationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          findFirst: {
            args: Prisma.ExerciseinformationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExerciseinformationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          findMany: {
            args: Prisma.ExerciseinformationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>[]
          }
          create: {
            args: Prisma.ExerciseinformationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          createMany: {
            args: Prisma.ExerciseinformationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExerciseinformationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          update: {
            args: Prisma.ExerciseinformationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          deleteMany: {
            args: Prisma.ExerciseinformationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExerciseinformationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExerciseinformationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExerciseinformationPayload>
          }
          aggregate: {
            args: Prisma.ExerciseinformationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExerciseinformation>
          }
          groupBy: {
            args: Prisma.ExerciseinformationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseinformationGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.ExerciseinformationFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.ExerciseinformationAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.ExerciseinformationCountArgs<ExtArgs>,
            result: $Utils.Optional<ExerciseinformationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    login_attempts: number | null
  }

  export type UserSumAggregateOutputType = {
    login_attempts: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    login_attempts: number | null
    locked_until: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstname: string | null
    lastname: string | null
    email: string | null
    password: string | null
    login_attempts: number | null
    locked_until: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstname: number
    lastname: number
    email: number
    password: number
    login_attempts: number
    locked_until: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    login_attempts?: true
  }

  export type UserSumAggregateInputType = {
    login_attempts?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    login_attempts?: true
    locked_until?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    login_attempts?: true
    locked_until?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstname?: true
    lastname?: true
    email?: true
    password?: true
    login_attempts?: true
    locked_until?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstname: string
    lastname: string
    email: string
    password: string
    login_attempts: number
    locked_until: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    login_attempts?: boolean
    locked_until?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstname?: boolean
    lastname?: boolean
    email?: boolean
    password?: boolean
    login_attempts?: boolean
    locked_until?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      firstname: string
      lastname: string
      email: string
      password: string
      login_attempts: number
      locked_until: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstname: FieldRef<"User", 'String'>
    readonly lastname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly login_attempts: FieldRef<"User", 'Int'>
    readonly locked_until: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Recipes
   */

  export type AggregateRecipes = {
    _count: RecipesCountAggregateOutputType | null
    _min: RecipesMinAggregateOutputType | null
    _max: RecipesMaxAggregateOutputType | null
  }

  export type RecipesMinAggregateOutputType = {
    id: string | null
    recipename: string | null
    image: string | null
  }

  export type RecipesMaxAggregateOutputType = {
    id: string | null
    recipename: string | null
    image: string | null
  }

  export type RecipesCountAggregateOutputType = {
    id: number
    recipename: number
    image: number
    _all: number
  }


  export type RecipesMinAggregateInputType = {
    id?: true
    recipename?: true
    image?: true
  }

  export type RecipesMaxAggregateInputType = {
    id?: true
    recipename?: true
    image?: true
  }

  export type RecipesCountAggregateInputType = {
    id?: true
    recipename?: true
    image?: true
    _all?: true
  }

  export type RecipesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to aggregate.
     */
    where?: RecipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipesOrderByWithRelationInput | RecipesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipes
    **/
    _count?: true | RecipesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipesMaxAggregateInputType
  }

  export type GetRecipesAggregateType<T extends RecipesAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipes[P]>
      : GetScalarType<T[P], AggregateRecipes[P]>
  }




  export type RecipesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecipesWhereInput
    orderBy?: RecipesOrderByWithAggregationInput | RecipesOrderByWithAggregationInput[]
    by: RecipesScalarFieldEnum[] | RecipesScalarFieldEnum
    having?: RecipesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipesCountAggregateInputType | true
    _min?: RecipesMinAggregateInputType
    _max?: RecipesMaxAggregateInputType
  }

  export type RecipesGroupByOutputType = {
    id: string
    recipename: string
    image: string
    _count: RecipesCountAggregateOutputType | null
    _min: RecipesMinAggregateOutputType | null
    _max: RecipesMaxAggregateOutputType | null
  }

  type GetRecipesGroupByPayload<T extends RecipesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipesGroupByOutputType[P]>
            : GetScalarType<T[P], RecipesGroupByOutputType[P]>
        }
      >
    >


  export type RecipesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipename?: boolean
    image?: boolean
  }, ExtArgs["result"]["recipes"]>

  export type RecipesSelectScalar = {
    id?: boolean
    recipename?: boolean
    image?: boolean
  }


  export type $RecipesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Recipes"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      recipename: string
      image: string
    }, ExtArgs["result"]["recipes"]>
    composites: {}
  }


  type RecipesGetPayload<S extends boolean | null | undefined | RecipesDefaultArgs> = $Result.GetResult<Prisma.$RecipesPayload, S>

  type RecipesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RecipesFindManyArgs, 'select' | 'include'> & {
      select?: RecipesCountAggregateInputType | true
    }

  export interface RecipesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipes'], meta: { name: 'Recipes' } }
    /**
     * Find zero or one Recipes that matches the filter.
     * @param {RecipesFindUniqueArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesFindUniqueArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recipes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecipesFindUniqueOrThrowArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesFindFirstArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesFindFirstArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recipes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesFindFirstOrThrowArgs} args - Arguments to find a Recipes
     * @example
     * // Get one Recipes
     * const recipes = await prisma.recipes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipes
     * const recipes = await prisma.recipes.findMany()
     * 
     * // Get first 10 Recipes
     * const recipes = await prisma.recipes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipesWithIdOnly = await prisma.recipes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecipesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recipes.
     * @param {RecipesCreateArgs} args - Arguments to create a Recipes.
     * @example
     * // Create one Recipes
     * const Recipes = await prisma.recipes.create({
     *   data: {
     *     // ... data to create a Recipes
     *   }
     * })
     * 
    **/
    create<T extends RecipesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesCreateArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recipes.
     *     @param {RecipesCreateManyArgs} args - Arguments to create many Recipes.
     *     @example
     *     // Create many Recipes
     *     const recipes = await prisma.recipes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipes.
     * @param {RecipesDeleteArgs} args - Arguments to delete one Recipes.
     * @example
     * // Delete one Recipes
     * const Recipes = await prisma.recipes.delete({
     *   where: {
     *     // ... filter to delete one Recipes
     *   }
     * })
     * 
    **/
    delete<T extends RecipesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesDeleteArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recipes.
     * @param {RecipesUpdateArgs} args - Arguments to update one Recipes.
     * @example
     * // Update one Recipes
     * const recipes = await prisma.recipes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesUpdateArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recipes.
     * @param {RecipesDeleteManyArgs} args - Arguments to filter Recipes to delete.
     * @example
     * // Delete a few Recipes
     * const { count } = await prisma.recipes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipes
     * const recipes = await prisma.recipes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipes.
     * @param {RecipesUpsertArgs} args - Arguments to update or create a Recipes.
     * @example
     * // Update or create a Recipes
     * const recipes = await prisma.recipes.upsert({
     *   create: {
     *     // ... data to create a Recipes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipes we want to update
     *   }
     * })
    **/
    upsert<T extends RecipesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecipesUpsertArgs<ExtArgs>>
    ): Prisma__RecipesClient<$Result.GetResult<Prisma.$RecipesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Recipes that matches the filter.
     * @param {RecipesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const recipes = await prisma.recipes.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: RecipesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Recipes.
     * @param {RecipesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const recipes = await prisma.recipes.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: RecipesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesCountArgs} args - Arguments to filter Recipes to count.
     * @example
     * // Count the number of Recipes
     * const count = await prisma.recipes.count({
     *   where: {
     *     // ... the filter for the Recipes we want to count
     *   }
     * })
    **/
    count<T extends RecipesCountArgs>(
      args?: Subset<T, RecipesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipesAggregateArgs>(args: Subset<T, RecipesAggregateArgs>): Prisma.PrismaPromise<GetRecipesAggregateType<T>>

    /**
     * Group by Recipes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipesGroupByArgs['orderBy'] }
        : { orderBy?: RecipesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipes model
   */
  readonly fields: RecipesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Recipes model
   */ 
  interface RecipesFieldRefs {
    readonly id: FieldRef<"Recipes", 'String'>
    readonly recipename: FieldRef<"Recipes", 'String'>
    readonly image: FieldRef<"Recipes", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Recipes findUnique
   */
  export type RecipesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where: RecipesWhereUniqueInput
  }


  /**
   * Recipes findUniqueOrThrow
   */
  export type RecipesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where: RecipesWhereUniqueInput
  }


  /**
   * Recipes findFirst
   */
  export type RecipesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipesOrderByWithRelationInput | RecipesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipesScalarFieldEnum | RecipesScalarFieldEnum[]
  }


  /**
   * Recipes findFirstOrThrow
   */
  export type RecipesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipesOrderByWithRelationInput | RecipesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipes.
     */
    cursor?: RecipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipes.
     */
    distinct?: RecipesScalarFieldEnum | RecipesScalarFieldEnum[]
  }


  /**
   * Recipes findMany
   */
  export type RecipesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter, which Recipes to fetch.
     */
    where?: RecipesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipes to fetch.
     */
    orderBy?: RecipesOrderByWithRelationInput | RecipesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipes.
     */
    cursor?: RecipesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipes.
     */
    skip?: number
    distinct?: RecipesScalarFieldEnum | RecipesScalarFieldEnum[]
  }


  /**
   * Recipes create
   */
  export type RecipesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * The data needed to create a Recipes.
     */
    data: XOR<RecipesCreateInput, RecipesUncheckedCreateInput>
  }


  /**
   * Recipes createMany
   */
  export type RecipesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipes.
     */
    data: RecipesCreateManyInput | RecipesCreateManyInput[]
  }


  /**
   * Recipes update
   */
  export type RecipesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * The data needed to update a Recipes.
     */
    data: XOR<RecipesUpdateInput, RecipesUncheckedUpdateInput>
    /**
     * Choose, which Recipes to update.
     */
    where: RecipesWhereUniqueInput
  }


  /**
   * Recipes updateMany
   */
  export type RecipesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipes.
     */
    data: XOR<RecipesUpdateManyMutationInput, RecipesUncheckedUpdateManyInput>
    /**
     * Filter which Recipes to update
     */
    where?: RecipesWhereInput
  }


  /**
   * Recipes upsert
   */
  export type RecipesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * The filter to search for the Recipes to update in case it exists.
     */
    where: RecipesWhereUniqueInput
    /**
     * In case the Recipes found by the `where` argument doesn't exist, create a new Recipes with this data.
     */
    create: XOR<RecipesCreateInput, RecipesUncheckedCreateInput>
    /**
     * In case the Recipes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipesUpdateInput, RecipesUncheckedUpdateInput>
  }


  /**
   * Recipes delete
   */
  export type RecipesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
    /**
     * Filter which Recipes to delete.
     */
    where: RecipesWhereUniqueInput
  }


  /**
   * Recipes deleteMany
   */
  export type RecipesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipes to delete
     */
    where?: RecipesWhereInput
  }


  /**
   * Recipes findRaw
   */
  export type RecipesFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Recipes aggregateRaw
   */
  export type RecipesAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Recipes without action
   */
  export type RecipesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipes
     */
    select?: RecipesSelect<ExtArgs> | null
  }



  /**
   * Model Recipeinformation
   */

  export type AggregateRecipeinformation = {
    _count: RecipeinformationCountAggregateOutputType | null
    _min: RecipeinformationMinAggregateOutputType | null
    _max: RecipeinformationMaxAggregateOutputType | null
  }

  export type RecipeinformationMinAggregateOutputType = {
    id: string | null
    recipename: string | null
    ingredients: string | null
    steps: string | null
    nutrition: string | null
  }

  export type RecipeinformationMaxAggregateOutputType = {
    id: string | null
    recipename: string | null
    ingredients: string | null
    steps: string | null
    nutrition: string | null
  }

  export type RecipeinformationCountAggregateOutputType = {
    id: number
    recipename: number
    ingredients: number
    steps: number
    nutrition: number
    _all: number
  }


  export type RecipeinformationMinAggregateInputType = {
    id?: true
    recipename?: true
    ingredients?: true
    steps?: true
    nutrition?: true
  }

  export type RecipeinformationMaxAggregateInputType = {
    id?: true
    recipename?: true
    ingredients?: true
    steps?: true
    nutrition?: true
  }

  export type RecipeinformationCountAggregateInputType = {
    id?: true
    recipename?: true
    ingredients?: true
    steps?: true
    nutrition?: true
    _all?: true
  }

  export type RecipeinformationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipeinformation to aggregate.
     */
    where?: RecipeinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipeinformations to fetch.
     */
    orderBy?: RecipeinformationOrderByWithRelationInput | RecipeinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RecipeinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipeinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipeinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Recipeinformations
    **/
    _count?: true | RecipeinformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RecipeinformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RecipeinformationMaxAggregateInputType
  }

  export type GetRecipeinformationAggregateType<T extends RecipeinformationAggregateArgs> = {
        [P in keyof T & keyof AggregateRecipeinformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRecipeinformation[P]>
      : GetScalarType<T[P], AggregateRecipeinformation[P]>
  }




  export type RecipeinformationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: RecipeinformationWhereInput
    orderBy?: RecipeinformationOrderByWithAggregationInput | RecipeinformationOrderByWithAggregationInput[]
    by: RecipeinformationScalarFieldEnum[] | RecipeinformationScalarFieldEnum
    having?: RecipeinformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RecipeinformationCountAggregateInputType | true
    _min?: RecipeinformationMinAggregateInputType
    _max?: RecipeinformationMaxAggregateInputType
  }

  export type RecipeinformationGroupByOutputType = {
    id: string
    recipename: string
    ingredients: string
    steps: string
    nutrition: string
    _count: RecipeinformationCountAggregateOutputType | null
    _min: RecipeinformationMinAggregateOutputType | null
    _max: RecipeinformationMaxAggregateOutputType | null
  }

  type GetRecipeinformationGroupByPayload<T extends RecipeinformationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RecipeinformationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RecipeinformationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RecipeinformationGroupByOutputType[P]>
            : GetScalarType<T[P], RecipeinformationGroupByOutputType[P]>
        }
      >
    >


  export type RecipeinformationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    recipename?: boolean
    ingredients?: boolean
    steps?: boolean
    nutrition?: boolean
  }, ExtArgs["result"]["recipeinformation"]>

  export type RecipeinformationSelectScalar = {
    id?: boolean
    recipename?: boolean
    ingredients?: boolean
    steps?: boolean
    nutrition?: boolean
  }


  export type $RecipeinformationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Recipeinformation"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      recipename: string
      ingredients: string
      steps: string
      nutrition: string
    }, ExtArgs["result"]["recipeinformation"]>
    composites: {}
  }


  type RecipeinformationGetPayload<S extends boolean | null | undefined | RecipeinformationDefaultArgs> = $Result.GetResult<Prisma.$RecipeinformationPayload, S>

  type RecipeinformationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<RecipeinformationFindManyArgs, 'select' | 'include'> & {
      select?: RecipeinformationCountAggregateInputType | true
    }

  export interface RecipeinformationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Recipeinformation'], meta: { name: 'Recipeinformation' } }
    /**
     * Find zero or one Recipeinformation that matches the filter.
     * @param {RecipeinformationFindUniqueArgs} args - Arguments to find a Recipeinformation
     * @example
     * // Get one Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RecipeinformationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationFindUniqueArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Recipeinformation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RecipeinformationFindUniqueOrThrowArgs} args - Arguments to find a Recipeinformation
     * @example
     * // Get one Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RecipeinformationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Recipeinformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationFindFirstArgs} args - Arguments to find a Recipeinformation
     * @example
     * // Get one Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RecipeinformationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationFindFirstArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Recipeinformation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationFindFirstOrThrowArgs} args - Arguments to find a Recipeinformation
     * @example
     * // Get one Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RecipeinformationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Recipeinformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Recipeinformations
     * const recipeinformations = await prisma.recipeinformation.findMany()
     * 
     * // Get first 10 Recipeinformations
     * const recipeinformations = await prisma.recipeinformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const recipeinformationWithIdOnly = await prisma.recipeinformation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RecipeinformationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Recipeinformation.
     * @param {RecipeinformationCreateArgs} args - Arguments to create a Recipeinformation.
     * @example
     * // Create one Recipeinformation
     * const Recipeinformation = await prisma.recipeinformation.create({
     *   data: {
     *     // ... data to create a Recipeinformation
     *   }
     * })
     * 
    **/
    create<T extends RecipeinformationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationCreateArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Recipeinformations.
     *     @param {RecipeinformationCreateManyArgs} args - Arguments to create many Recipeinformations.
     *     @example
     *     // Create many Recipeinformations
     *     const recipeinformation = await prisma.recipeinformation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RecipeinformationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Recipeinformation.
     * @param {RecipeinformationDeleteArgs} args - Arguments to delete one Recipeinformation.
     * @example
     * // Delete one Recipeinformation
     * const Recipeinformation = await prisma.recipeinformation.delete({
     *   where: {
     *     // ... filter to delete one Recipeinformation
     *   }
     * })
     * 
    **/
    delete<T extends RecipeinformationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationDeleteArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Recipeinformation.
     * @param {RecipeinformationUpdateArgs} args - Arguments to update one Recipeinformation.
     * @example
     * // Update one Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RecipeinformationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationUpdateArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Recipeinformations.
     * @param {RecipeinformationDeleteManyArgs} args - Arguments to filter Recipeinformations to delete.
     * @example
     * // Delete a few Recipeinformations
     * const { count } = await prisma.recipeinformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RecipeinformationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RecipeinformationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Recipeinformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Recipeinformations
     * const recipeinformation = await prisma.recipeinformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RecipeinformationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Recipeinformation.
     * @param {RecipeinformationUpsertArgs} args - Arguments to update or create a Recipeinformation.
     * @example
     * // Update or create a Recipeinformation
     * const recipeinformation = await prisma.recipeinformation.upsert({
     *   create: {
     *     // ... data to create a Recipeinformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Recipeinformation we want to update
     *   }
     * })
    **/
    upsert<T extends RecipeinformationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RecipeinformationUpsertArgs<ExtArgs>>
    ): Prisma__RecipeinformationClient<$Result.GetResult<Prisma.$RecipeinformationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Recipeinformations that matches the filter.
     * @param {RecipeinformationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const recipeinformation = await prisma.recipeinformation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: RecipeinformationFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Recipeinformation.
     * @param {RecipeinformationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const recipeinformation = await prisma.recipeinformation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: RecipeinformationAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Recipeinformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationCountArgs} args - Arguments to filter Recipeinformations to count.
     * @example
     * // Count the number of Recipeinformations
     * const count = await prisma.recipeinformation.count({
     *   where: {
     *     // ... the filter for the Recipeinformations we want to count
     *   }
     * })
    **/
    count<T extends RecipeinformationCountArgs>(
      args?: Subset<T, RecipeinformationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RecipeinformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Recipeinformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RecipeinformationAggregateArgs>(args: Subset<T, RecipeinformationAggregateArgs>): Prisma.PrismaPromise<GetRecipeinformationAggregateType<T>>

    /**
     * Group by Recipeinformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RecipeinformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RecipeinformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RecipeinformationGroupByArgs['orderBy'] }
        : { orderBy?: RecipeinformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RecipeinformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRecipeinformationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Recipeinformation model
   */
  readonly fields: RecipeinformationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Recipeinformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RecipeinformationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Recipeinformation model
   */ 
  interface RecipeinformationFieldRefs {
    readonly id: FieldRef<"Recipeinformation", 'String'>
    readonly recipename: FieldRef<"Recipeinformation", 'String'>
    readonly ingredients: FieldRef<"Recipeinformation", 'String'>
    readonly steps: FieldRef<"Recipeinformation", 'String'>
    readonly nutrition: FieldRef<"Recipeinformation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Recipeinformation findUnique
   */
  export type RecipeinformationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter, which Recipeinformation to fetch.
     */
    where: RecipeinformationWhereUniqueInput
  }


  /**
   * Recipeinformation findUniqueOrThrow
   */
  export type RecipeinformationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter, which Recipeinformation to fetch.
     */
    where: RecipeinformationWhereUniqueInput
  }


  /**
   * Recipeinformation findFirst
   */
  export type RecipeinformationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter, which Recipeinformation to fetch.
     */
    where?: RecipeinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipeinformations to fetch.
     */
    orderBy?: RecipeinformationOrderByWithRelationInput | RecipeinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipeinformations.
     */
    cursor?: RecipeinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipeinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipeinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipeinformations.
     */
    distinct?: RecipeinformationScalarFieldEnum | RecipeinformationScalarFieldEnum[]
  }


  /**
   * Recipeinformation findFirstOrThrow
   */
  export type RecipeinformationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter, which Recipeinformation to fetch.
     */
    where?: RecipeinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipeinformations to fetch.
     */
    orderBy?: RecipeinformationOrderByWithRelationInput | RecipeinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Recipeinformations.
     */
    cursor?: RecipeinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipeinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipeinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Recipeinformations.
     */
    distinct?: RecipeinformationScalarFieldEnum | RecipeinformationScalarFieldEnum[]
  }


  /**
   * Recipeinformation findMany
   */
  export type RecipeinformationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter, which Recipeinformations to fetch.
     */
    where?: RecipeinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Recipeinformations to fetch.
     */
    orderBy?: RecipeinformationOrderByWithRelationInput | RecipeinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Recipeinformations.
     */
    cursor?: RecipeinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Recipeinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Recipeinformations.
     */
    skip?: number
    distinct?: RecipeinformationScalarFieldEnum | RecipeinformationScalarFieldEnum[]
  }


  /**
   * Recipeinformation create
   */
  export type RecipeinformationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * The data needed to create a Recipeinformation.
     */
    data: XOR<RecipeinformationCreateInput, RecipeinformationUncheckedCreateInput>
  }


  /**
   * Recipeinformation createMany
   */
  export type RecipeinformationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Recipeinformations.
     */
    data: RecipeinformationCreateManyInput | RecipeinformationCreateManyInput[]
  }


  /**
   * Recipeinformation update
   */
  export type RecipeinformationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * The data needed to update a Recipeinformation.
     */
    data: XOR<RecipeinformationUpdateInput, RecipeinformationUncheckedUpdateInput>
    /**
     * Choose, which Recipeinformation to update.
     */
    where: RecipeinformationWhereUniqueInput
  }


  /**
   * Recipeinformation updateMany
   */
  export type RecipeinformationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Recipeinformations.
     */
    data: XOR<RecipeinformationUpdateManyMutationInput, RecipeinformationUncheckedUpdateManyInput>
    /**
     * Filter which Recipeinformations to update
     */
    where?: RecipeinformationWhereInput
  }


  /**
   * Recipeinformation upsert
   */
  export type RecipeinformationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * The filter to search for the Recipeinformation to update in case it exists.
     */
    where: RecipeinformationWhereUniqueInput
    /**
     * In case the Recipeinformation found by the `where` argument doesn't exist, create a new Recipeinformation with this data.
     */
    create: XOR<RecipeinformationCreateInput, RecipeinformationUncheckedCreateInput>
    /**
     * In case the Recipeinformation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RecipeinformationUpdateInput, RecipeinformationUncheckedUpdateInput>
  }


  /**
   * Recipeinformation delete
   */
  export type RecipeinformationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
    /**
     * Filter which Recipeinformation to delete.
     */
    where: RecipeinformationWhereUniqueInput
  }


  /**
   * Recipeinformation deleteMany
   */
  export type RecipeinformationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Recipeinformations to delete
     */
    where?: RecipeinformationWhereInput
  }


  /**
   * Recipeinformation findRaw
   */
  export type RecipeinformationFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Recipeinformation aggregateRaw
   */
  export type RecipeinformationAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Recipeinformation without action
   */
  export type RecipeinformationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Recipeinformation
     */
    select?: RecipeinformationSelect<ExtArgs> | null
  }



  /**
   * Model Exercises
   */

  export type AggregateExercises = {
    _count: ExercisesCountAggregateOutputType | null
    _min: ExercisesMinAggregateOutputType | null
    _max: ExercisesMaxAggregateOutputType | null
  }

  export type ExercisesMinAggregateOutputType = {
    id: string | null
    exercise: string | null
    image: string | null
  }

  export type ExercisesMaxAggregateOutputType = {
    id: string | null
    exercise: string | null
    image: string | null
  }

  export type ExercisesCountAggregateOutputType = {
    id: number
    exercise: number
    image: number
    _all: number
  }


  export type ExercisesMinAggregateInputType = {
    id?: true
    exercise?: true
    image?: true
  }

  export type ExercisesMaxAggregateInputType = {
    id?: true
    exercise?: true
    image?: true
  }

  export type ExercisesCountAggregateInputType = {
    id?: true
    exercise?: true
    image?: true
    _all?: true
  }

  export type ExercisesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to aggregate.
     */
    where?: ExercisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExercisesOrderByWithRelationInput | ExercisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExercisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exercises
    **/
    _count?: true | ExercisesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExercisesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExercisesMaxAggregateInputType
  }

  export type GetExercisesAggregateType<T extends ExercisesAggregateArgs> = {
        [P in keyof T & keyof AggregateExercises]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExercises[P]>
      : GetScalarType<T[P], AggregateExercises[P]>
  }




  export type ExercisesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExercisesWhereInput
    orderBy?: ExercisesOrderByWithAggregationInput | ExercisesOrderByWithAggregationInput[]
    by: ExercisesScalarFieldEnum[] | ExercisesScalarFieldEnum
    having?: ExercisesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExercisesCountAggregateInputType | true
    _min?: ExercisesMinAggregateInputType
    _max?: ExercisesMaxAggregateInputType
  }

  export type ExercisesGroupByOutputType = {
    id: string
    exercise: string
    image: string
    _count: ExercisesCountAggregateOutputType | null
    _min: ExercisesMinAggregateOutputType | null
    _max: ExercisesMaxAggregateOutputType | null
  }

  type GetExercisesGroupByPayload<T extends ExercisesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExercisesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExercisesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExercisesGroupByOutputType[P]>
            : GetScalarType<T[P], ExercisesGroupByOutputType[P]>
        }
      >
    >


  export type ExercisesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise?: boolean
    image?: boolean
  }, ExtArgs["result"]["exercises"]>

  export type ExercisesSelectScalar = {
    id?: boolean
    exercise?: boolean
    image?: boolean
  }


  export type $ExercisesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Exercises"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      exercise: string
      image: string
    }, ExtArgs["result"]["exercises"]>
    composites: {}
  }


  type ExercisesGetPayload<S extends boolean | null | undefined | ExercisesDefaultArgs> = $Result.GetResult<Prisma.$ExercisesPayload, S>

  type ExercisesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExercisesFindManyArgs, 'select' | 'include'> & {
      select?: ExercisesCountAggregateInputType | true
    }

  export interface ExercisesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exercises'], meta: { name: 'Exercises' } }
    /**
     * Find zero or one Exercises that matches the filter.
     * @param {ExercisesFindUniqueArgs} args - Arguments to find a Exercises
     * @example
     * // Get one Exercises
     * const exercises = await prisma.exercises.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExercisesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesFindUniqueArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exercises that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExercisesFindUniqueOrThrowArgs} args - Arguments to find a Exercises
     * @example
     * // Get one Exercises
     * const exercises = await prisma.exercises.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExercisesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesFindFirstArgs} args - Arguments to find a Exercises
     * @example
     * // Get one Exercises
     * const exercises = await prisma.exercises.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExercisesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesFindFirstArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exercises that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesFindFirstOrThrowArgs} args - Arguments to find a Exercises
     * @example
     * // Get one Exercises
     * const exercises = await prisma.exercises.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExercisesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exercises
     * const exercises = await prisma.exercises.findMany()
     * 
     * // Get first 10 Exercises
     * const exercises = await prisma.exercises.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exercisesWithIdOnly = await prisma.exercises.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExercisesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exercises.
     * @param {ExercisesCreateArgs} args - Arguments to create a Exercises.
     * @example
     * // Create one Exercises
     * const Exercises = await prisma.exercises.create({
     *   data: {
     *     // ... data to create a Exercises
     *   }
     * })
     * 
    **/
    create<T extends ExercisesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesCreateArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exercises.
     *     @param {ExercisesCreateManyArgs} args - Arguments to create many Exercises.
     *     @example
     *     // Create many Exercises
     *     const exercises = await prisma.exercises.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExercisesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exercises.
     * @param {ExercisesDeleteArgs} args - Arguments to delete one Exercises.
     * @example
     * // Delete one Exercises
     * const Exercises = await prisma.exercises.delete({
     *   where: {
     *     // ... filter to delete one Exercises
     *   }
     * })
     * 
    **/
    delete<T extends ExercisesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesDeleteArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exercises.
     * @param {ExercisesUpdateArgs} args - Arguments to update one Exercises.
     * @example
     * // Update one Exercises
     * const exercises = await prisma.exercises.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExercisesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesUpdateArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exercises.
     * @param {ExercisesDeleteManyArgs} args - Arguments to filter Exercises to delete.
     * @example
     * // Delete a few Exercises
     * const { count } = await prisma.exercises.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExercisesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExercisesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exercises
     * const exercises = await prisma.exercises.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExercisesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exercises.
     * @param {ExercisesUpsertArgs} args - Arguments to update or create a Exercises.
     * @example
     * // Update or create a Exercises
     * const exercises = await prisma.exercises.upsert({
     *   create: {
     *     // ... data to create a Exercises
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exercises we want to update
     *   }
     * })
    **/
    upsert<T extends ExercisesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExercisesUpsertArgs<ExtArgs>>
    ): Prisma__ExercisesClient<$Result.GetResult<Prisma.$ExercisesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Exercises that matches the filter.
     * @param {ExercisesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const exercises = await prisma.exercises.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ExercisesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Exercises.
     * @param {ExercisesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const exercises = await prisma.exercises.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ExercisesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesCountArgs} args - Arguments to filter Exercises to count.
     * @example
     * // Count the number of Exercises
     * const count = await prisma.exercises.count({
     *   where: {
     *     // ... the filter for the Exercises we want to count
     *   }
     * })
    **/
    count<T extends ExercisesCountArgs>(
      args?: Subset<T, ExercisesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExercisesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExercisesAggregateArgs>(args: Subset<T, ExercisesAggregateArgs>): Prisma.PrismaPromise<GetExercisesAggregateType<T>>

    /**
     * Group by Exercises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExercisesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExercisesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExercisesGroupByArgs['orderBy'] }
        : { orderBy?: ExercisesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExercisesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExercisesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exercises model
   */
  readonly fields: ExercisesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exercises.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExercisesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exercises model
   */ 
  interface ExercisesFieldRefs {
    readonly id: FieldRef<"Exercises", 'String'>
    readonly exercise: FieldRef<"Exercises", 'String'>
    readonly image: FieldRef<"Exercises", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Exercises findUnique
   */
  export type ExercisesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where: ExercisesWhereUniqueInput
  }


  /**
   * Exercises findUniqueOrThrow
   */
  export type ExercisesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where: ExercisesWhereUniqueInput
  }


  /**
   * Exercises findFirst
   */
  export type ExercisesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExercisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExercisesOrderByWithRelationInput | ExercisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExercisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExercisesScalarFieldEnum | ExercisesScalarFieldEnum[]
  }


  /**
   * Exercises findFirstOrThrow
   */
  export type ExercisesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExercisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExercisesOrderByWithRelationInput | ExercisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exercises.
     */
    cursor?: ExercisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exercises.
     */
    distinct?: ExercisesScalarFieldEnum | ExercisesScalarFieldEnum[]
  }


  /**
   * Exercises findMany
   */
  export type ExercisesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter, which Exercises to fetch.
     */
    where?: ExercisesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exercises to fetch.
     */
    orderBy?: ExercisesOrderByWithRelationInput | ExercisesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exercises.
     */
    cursor?: ExercisesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exercises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exercises.
     */
    skip?: number
    distinct?: ExercisesScalarFieldEnum | ExercisesScalarFieldEnum[]
  }


  /**
   * Exercises create
   */
  export type ExercisesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * The data needed to create a Exercises.
     */
    data: XOR<ExercisesCreateInput, ExercisesUncheckedCreateInput>
  }


  /**
   * Exercises createMany
   */
  export type ExercisesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exercises.
     */
    data: ExercisesCreateManyInput | ExercisesCreateManyInput[]
  }


  /**
   * Exercises update
   */
  export type ExercisesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * The data needed to update a Exercises.
     */
    data: XOR<ExercisesUpdateInput, ExercisesUncheckedUpdateInput>
    /**
     * Choose, which Exercises to update.
     */
    where: ExercisesWhereUniqueInput
  }


  /**
   * Exercises updateMany
   */
  export type ExercisesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exercises.
     */
    data: XOR<ExercisesUpdateManyMutationInput, ExercisesUncheckedUpdateManyInput>
    /**
     * Filter which Exercises to update
     */
    where?: ExercisesWhereInput
  }


  /**
   * Exercises upsert
   */
  export type ExercisesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * The filter to search for the Exercises to update in case it exists.
     */
    where: ExercisesWhereUniqueInput
    /**
     * In case the Exercises found by the `where` argument doesn't exist, create a new Exercises with this data.
     */
    create: XOR<ExercisesCreateInput, ExercisesUncheckedCreateInput>
    /**
     * In case the Exercises was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExercisesUpdateInput, ExercisesUncheckedUpdateInput>
  }


  /**
   * Exercises delete
   */
  export type ExercisesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
    /**
     * Filter which Exercises to delete.
     */
    where: ExercisesWhereUniqueInput
  }


  /**
   * Exercises deleteMany
   */
  export type ExercisesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exercises to delete
     */
    where?: ExercisesWhereInput
  }


  /**
   * Exercises findRaw
   */
  export type ExercisesFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Exercises aggregateRaw
   */
  export type ExercisesAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Exercises without action
   */
  export type ExercisesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exercises
     */
    select?: ExercisesSelect<ExtArgs> | null
  }



  /**
   * Model Exerciseinformation
   */

  export type AggregateExerciseinformation = {
    _count: ExerciseinformationCountAggregateOutputType | null
    _min: ExerciseinformationMinAggregateOutputType | null
    _max: ExerciseinformationMaxAggregateOutputType | null
  }

  export type ExerciseinformationMinAggregateOutputType = {
    id: string | null
    exercise: string | null
    videolink: string | null
  }

  export type ExerciseinformationMaxAggregateOutputType = {
    id: string | null
    exercise: string | null
    videolink: string | null
  }

  export type ExerciseinformationCountAggregateOutputType = {
    id: number
    exercise: number
    videolink: number
    _all: number
  }


  export type ExerciseinformationMinAggregateInputType = {
    id?: true
    exercise?: true
    videolink?: true
  }

  export type ExerciseinformationMaxAggregateInputType = {
    id?: true
    exercise?: true
    videolink?: true
  }

  export type ExerciseinformationCountAggregateInputType = {
    id?: true
    exercise?: true
    videolink?: true
    _all?: true
  }

  export type ExerciseinformationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exerciseinformation to aggregate.
     */
    where?: ExerciseinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exerciseinformations to fetch.
     */
    orderBy?: ExerciseinformationOrderByWithRelationInput | ExerciseinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExerciseinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exerciseinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exerciseinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Exerciseinformations
    **/
    _count?: true | ExerciseinformationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExerciseinformationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExerciseinformationMaxAggregateInputType
  }

  export type GetExerciseinformationAggregateType<T extends ExerciseinformationAggregateArgs> = {
        [P in keyof T & keyof AggregateExerciseinformation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExerciseinformation[P]>
      : GetScalarType<T[P], AggregateExerciseinformation[P]>
  }




  export type ExerciseinformationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ExerciseinformationWhereInput
    orderBy?: ExerciseinformationOrderByWithAggregationInput | ExerciseinformationOrderByWithAggregationInput[]
    by: ExerciseinformationScalarFieldEnum[] | ExerciseinformationScalarFieldEnum
    having?: ExerciseinformationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExerciseinformationCountAggregateInputType | true
    _min?: ExerciseinformationMinAggregateInputType
    _max?: ExerciseinformationMaxAggregateInputType
  }

  export type ExerciseinformationGroupByOutputType = {
    id: string
    exercise: string
    videolink: string
    _count: ExerciseinformationCountAggregateOutputType | null
    _min: ExerciseinformationMinAggregateOutputType | null
    _max: ExerciseinformationMaxAggregateOutputType | null
  }

  type GetExerciseinformationGroupByPayload<T extends ExerciseinformationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExerciseinformationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExerciseinformationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExerciseinformationGroupByOutputType[P]>
            : GetScalarType<T[P], ExerciseinformationGroupByOutputType[P]>
        }
      >
    >


  export type ExerciseinformationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    exercise?: boolean
    videolink?: boolean
  }, ExtArgs["result"]["exerciseinformation"]>

  export type ExerciseinformationSelectScalar = {
    id?: boolean
    exercise?: boolean
    videolink?: boolean
  }


  export type $ExerciseinformationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "Exerciseinformation"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      exercise: string
      videolink: string
    }, ExtArgs["result"]["exerciseinformation"]>
    composites: {}
  }


  type ExerciseinformationGetPayload<S extends boolean | null | undefined | ExerciseinformationDefaultArgs> = $Result.GetResult<Prisma.$ExerciseinformationPayload, S>

  type ExerciseinformationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ExerciseinformationFindManyArgs, 'select' | 'include'> & {
      select?: ExerciseinformationCountAggregateInputType | true
    }

  export interface ExerciseinformationDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Exerciseinformation'], meta: { name: 'Exerciseinformation' } }
    /**
     * Find zero or one Exerciseinformation that matches the filter.
     * @param {ExerciseinformationFindUniqueArgs} args - Arguments to find a Exerciseinformation
     * @example
     * // Get one Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExerciseinformationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationFindUniqueArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Exerciseinformation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExerciseinformationFindUniqueOrThrowArgs} args - Arguments to find a Exerciseinformation
     * @example
     * // Get one Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExerciseinformationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Exerciseinformation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationFindFirstArgs} args - Arguments to find a Exerciseinformation
     * @example
     * // Get one Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExerciseinformationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationFindFirstArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Exerciseinformation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationFindFirstOrThrowArgs} args - Arguments to find a Exerciseinformation
     * @example
     * // Get one Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExerciseinformationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Exerciseinformations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Exerciseinformations
     * const exerciseinformations = await prisma.exerciseinformation.findMany()
     * 
     * // Get first 10 Exerciseinformations
     * const exerciseinformations = await prisma.exerciseinformation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exerciseinformationWithIdOnly = await prisma.exerciseinformation.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExerciseinformationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Exerciseinformation.
     * @param {ExerciseinformationCreateArgs} args - Arguments to create a Exerciseinformation.
     * @example
     * // Create one Exerciseinformation
     * const Exerciseinformation = await prisma.exerciseinformation.create({
     *   data: {
     *     // ... data to create a Exerciseinformation
     *   }
     * })
     * 
    **/
    create<T extends ExerciseinformationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationCreateArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Exerciseinformations.
     *     @param {ExerciseinformationCreateManyArgs} args - Arguments to create many Exerciseinformations.
     *     @example
     *     // Create many Exerciseinformations
     *     const exerciseinformation = await prisma.exerciseinformation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExerciseinformationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Exerciseinformation.
     * @param {ExerciseinformationDeleteArgs} args - Arguments to delete one Exerciseinformation.
     * @example
     * // Delete one Exerciseinformation
     * const Exerciseinformation = await prisma.exerciseinformation.delete({
     *   where: {
     *     // ... filter to delete one Exerciseinformation
     *   }
     * })
     * 
    **/
    delete<T extends ExerciseinformationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationDeleteArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Exerciseinformation.
     * @param {ExerciseinformationUpdateArgs} args - Arguments to update one Exerciseinformation.
     * @example
     * // Update one Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExerciseinformationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationUpdateArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Exerciseinformations.
     * @param {ExerciseinformationDeleteManyArgs} args - Arguments to filter Exerciseinformations to delete.
     * @example
     * // Delete a few Exerciseinformations
     * const { count } = await prisma.exerciseinformation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExerciseinformationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExerciseinformationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Exerciseinformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Exerciseinformations
     * const exerciseinformation = await prisma.exerciseinformation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExerciseinformationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Exerciseinformation.
     * @param {ExerciseinformationUpsertArgs} args - Arguments to update or create a Exerciseinformation.
     * @example
     * // Update or create a Exerciseinformation
     * const exerciseinformation = await prisma.exerciseinformation.upsert({
     *   create: {
     *     // ... data to create a Exerciseinformation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Exerciseinformation we want to update
     *   }
     * })
    **/
    upsert<T extends ExerciseinformationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExerciseinformationUpsertArgs<ExtArgs>>
    ): Prisma__ExerciseinformationClient<$Result.GetResult<Prisma.$ExerciseinformationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Exerciseinformations that matches the filter.
     * @param {ExerciseinformationFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const exerciseinformation = await prisma.exerciseinformation.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ExerciseinformationFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Exerciseinformation.
     * @param {ExerciseinformationAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const exerciseinformation = await prisma.exerciseinformation.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ExerciseinformationAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Exerciseinformations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationCountArgs} args - Arguments to filter Exerciseinformations to count.
     * @example
     * // Count the number of Exerciseinformations
     * const count = await prisma.exerciseinformation.count({
     *   where: {
     *     // ... the filter for the Exerciseinformations we want to count
     *   }
     * })
    **/
    count<T extends ExerciseinformationCountArgs>(
      args?: Subset<T, ExerciseinformationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExerciseinformationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Exerciseinformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExerciseinformationAggregateArgs>(args: Subset<T, ExerciseinformationAggregateArgs>): Prisma.PrismaPromise<GetExerciseinformationAggregateType<T>>

    /**
     * Group by Exerciseinformation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExerciseinformationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExerciseinformationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExerciseinformationGroupByArgs['orderBy'] }
        : { orderBy?: ExerciseinformationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExerciseinformationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExerciseinformationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Exerciseinformation model
   */
  readonly fields: ExerciseinformationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Exerciseinformation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExerciseinformationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Exerciseinformation model
   */ 
  interface ExerciseinformationFieldRefs {
    readonly id: FieldRef<"Exerciseinformation", 'String'>
    readonly exercise: FieldRef<"Exerciseinformation", 'String'>
    readonly videolink: FieldRef<"Exerciseinformation", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Exerciseinformation findUnique
   */
  export type ExerciseinformationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter, which Exerciseinformation to fetch.
     */
    where: ExerciseinformationWhereUniqueInput
  }


  /**
   * Exerciseinformation findUniqueOrThrow
   */
  export type ExerciseinformationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter, which Exerciseinformation to fetch.
     */
    where: ExerciseinformationWhereUniqueInput
  }


  /**
   * Exerciseinformation findFirst
   */
  export type ExerciseinformationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter, which Exerciseinformation to fetch.
     */
    where?: ExerciseinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exerciseinformations to fetch.
     */
    orderBy?: ExerciseinformationOrderByWithRelationInput | ExerciseinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exerciseinformations.
     */
    cursor?: ExerciseinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exerciseinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exerciseinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exerciseinformations.
     */
    distinct?: ExerciseinformationScalarFieldEnum | ExerciseinformationScalarFieldEnum[]
  }


  /**
   * Exerciseinformation findFirstOrThrow
   */
  export type ExerciseinformationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter, which Exerciseinformation to fetch.
     */
    where?: ExerciseinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exerciseinformations to fetch.
     */
    orderBy?: ExerciseinformationOrderByWithRelationInput | ExerciseinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Exerciseinformations.
     */
    cursor?: ExerciseinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exerciseinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exerciseinformations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Exerciseinformations.
     */
    distinct?: ExerciseinformationScalarFieldEnum | ExerciseinformationScalarFieldEnum[]
  }


  /**
   * Exerciseinformation findMany
   */
  export type ExerciseinformationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter, which Exerciseinformations to fetch.
     */
    where?: ExerciseinformationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Exerciseinformations to fetch.
     */
    orderBy?: ExerciseinformationOrderByWithRelationInput | ExerciseinformationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Exerciseinformations.
     */
    cursor?: ExerciseinformationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Exerciseinformations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Exerciseinformations.
     */
    skip?: number
    distinct?: ExerciseinformationScalarFieldEnum | ExerciseinformationScalarFieldEnum[]
  }


  /**
   * Exerciseinformation create
   */
  export type ExerciseinformationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * The data needed to create a Exerciseinformation.
     */
    data: XOR<ExerciseinformationCreateInput, ExerciseinformationUncheckedCreateInput>
  }


  /**
   * Exerciseinformation createMany
   */
  export type ExerciseinformationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Exerciseinformations.
     */
    data: ExerciseinformationCreateManyInput | ExerciseinformationCreateManyInput[]
  }


  /**
   * Exerciseinformation update
   */
  export type ExerciseinformationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * The data needed to update a Exerciseinformation.
     */
    data: XOR<ExerciseinformationUpdateInput, ExerciseinformationUncheckedUpdateInput>
    /**
     * Choose, which Exerciseinformation to update.
     */
    where: ExerciseinformationWhereUniqueInput
  }


  /**
   * Exerciseinformation updateMany
   */
  export type ExerciseinformationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Exerciseinformations.
     */
    data: XOR<ExerciseinformationUpdateManyMutationInput, ExerciseinformationUncheckedUpdateManyInput>
    /**
     * Filter which Exerciseinformations to update
     */
    where?: ExerciseinformationWhereInput
  }


  /**
   * Exerciseinformation upsert
   */
  export type ExerciseinformationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * The filter to search for the Exerciseinformation to update in case it exists.
     */
    where: ExerciseinformationWhereUniqueInput
    /**
     * In case the Exerciseinformation found by the `where` argument doesn't exist, create a new Exerciseinformation with this data.
     */
    create: XOR<ExerciseinformationCreateInput, ExerciseinformationUncheckedCreateInput>
    /**
     * In case the Exerciseinformation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExerciseinformationUpdateInput, ExerciseinformationUncheckedUpdateInput>
  }


  /**
   * Exerciseinformation delete
   */
  export type ExerciseinformationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
    /**
     * Filter which Exerciseinformation to delete.
     */
    where: ExerciseinformationWhereUniqueInput
  }


  /**
   * Exerciseinformation deleteMany
   */
  export type ExerciseinformationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Exerciseinformations to delete
     */
    where?: ExerciseinformationWhereInput
  }


  /**
   * Exerciseinformation findRaw
   */
  export type ExerciseinformationFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Exerciseinformation aggregateRaw
   */
  export type ExerciseinformationAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * Exerciseinformation without action
   */
  export type ExerciseinformationDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Exerciseinformation
     */
    select?: ExerciseinformationSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    firstname: 'firstname',
    lastname: 'lastname',
    email: 'email',
    password: 'password',
    login_attempts: 'login_attempts',
    locked_until: 'locked_until'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RecipesScalarFieldEnum: {
    id: 'id',
    recipename: 'recipename',
    image: 'image'
  };

  export type RecipesScalarFieldEnum = (typeof RecipesScalarFieldEnum)[keyof typeof RecipesScalarFieldEnum]


  export const RecipeinformationScalarFieldEnum: {
    id: 'id',
    recipename: 'recipename',
    ingredients: 'ingredients',
    steps: 'steps',
    nutrition: 'nutrition'
  };

  export type RecipeinformationScalarFieldEnum = (typeof RecipeinformationScalarFieldEnum)[keyof typeof RecipeinformationScalarFieldEnum]


  export const ExercisesScalarFieldEnum: {
    id: 'id',
    exercise: 'exercise',
    image: 'image'
  };

  export type ExercisesScalarFieldEnum = (typeof ExercisesScalarFieldEnum)[keyof typeof ExercisesScalarFieldEnum]


  export const ExerciseinformationScalarFieldEnum: {
    id: 'id',
    exercise: 'exercise',
    videolink: 'videolink'
  };

  export type ExerciseinformationScalarFieldEnum = (typeof ExerciseinformationScalarFieldEnum)[keyof typeof ExerciseinformationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    login_attempts?: IntFilter<"User"> | number
    locked_until?: DateTimeNullableFilter<"User"> | Date | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login_attempts?: SortOrder
    locked_until?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstname?: StringFilter<"User"> | string
    lastname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    login_attempts?: IntFilter<"User"> | number
    locked_until?: DateTimeNullableFilter<"User"> | Date | string | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login_attempts?: SortOrder
    locked_until?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstname?: StringWithAggregatesFilter<"User"> | string
    lastname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    login_attempts?: IntWithAggregatesFilter<"User"> | number
    locked_until?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type RecipesWhereInput = {
    AND?: RecipesWhereInput | RecipesWhereInput[]
    OR?: RecipesWhereInput[]
    NOT?: RecipesWhereInput | RecipesWhereInput[]
    id?: StringFilter<"Recipes"> | string
    recipename?: StringFilter<"Recipes"> | string
    image?: StringFilter<"Recipes"> | string
  }

  export type RecipesOrderByWithRelationInput = {
    id?: SortOrder
    recipename?: SortOrder
    image?: SortOrder
  }

  export type RecipesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipesWhereInput | RecipesWhereInput[]
    OR?: RecipesWhereInput[]
    NOT?: RecipesWhereInput | RecipesWhereInput[]
    recipename?: StringFilter<"Recipes"> | string
    image?: StringFilter<"Recipes"> | string
  }, "id">

  export type RecipesOrderByWithAggregationInput = {
    id?: SortOrder
    recipename?: SortOrder
    image?: SortOrder
    _count?: RecipesCountOrderByAggregateInput
    _max?: RecipesMaxOrderByAggregateInput
    _min?: RecipesMinOrderByAggregateInput
  }

  export type RecipesScalarWhereWithAggregatesInput = {
    AND?: RecipesScalarWhereWithAggregatesInput | RecipesScalarWhereWithAggregatesInput[]
    OR?: RecipesScalarWhereWithAggregatesInput[]
    NOT?: RecipesScalarWhereWithAggregatesInput | RecipesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipes"> | string
    recipename?: StringWithAggregatesFilter<"Recipes"> | string
    image?: StringWithAggregatesFilter<"Recipes"> | string
  }

  export type RecipeinformationWhereInput = {
    AND?: RecipeinformationWhereInput | RecipeinformationWhereInput[]
    OR?: RecipeinformationWhereInput[]
    NOT?: RecipeinformationWhereInput | RecipeinformationWhereInput[]
    id?: StringFilter<"Recipeinformation"> | string
    recipename?: StringFilter<"Recipeinformation"> | string
    ingredients?: StringFilter<"Recipeinformation"> | string
    steps?: StringFilter<"Recipeinformation"> | string
    nutrition?: StringFilter<"Recipeinformation"> | string
  }

  export type RecipeinformationOrderByWithRelationInput = {
    id?: SortOrder
    recipename?: SortOrder
    ingredients?: SortOrder
    steps?: SortOrder
    nutrition?: SortOrder
  }

  export type RecipeinformationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RecipeinformationWhereInput | RecipeinformationWhereInput[]
    OR?: RecipeinformationWhereInput[]
    NOT?: RecipeinformationWhereInput | RecipeinformationWhereInput[]
    recipename?: StringFilter<"Recipeinformation"> | string
    ingredients?: StringFilter<"Recipeinformation"> | string
    steps?: StringFilter<"Recipeinformation"> | string
    nutrition?: StringFilter<"Recipeinformation"> | string
  }, "id">

  export type RecipeinformationOrderByWithAggregationInput = {
    id?: SortOrder
    recipename?: SortOrder
    ingredients?: SortOrder
    steps?: SortOrder
    nutrition?: SortOrder
    _count?: RecipeinformationCountOrderByAggregateInput
    _max?: RecipeinformationMaxOrderByAggregateInput
    _min?: RecipeinformationMinOrderByAggregateInput
  }

  export type RecipeinformationScalarWhereWithAggregatesInput = {
    AND?: RecipeinformationScalarWhereWithAggregatesInput | RecipeinformationScalarWhereWithAggregatesInput[]
    OR?: RecipeinformationScalarWhereWithAggregatesInput[]
    NOT?: RecipeinformationScalarWhereWithAggregatesInput | RecipeinformationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Recipeinformation"> | string
    recipename?: StringWithAggregatesFilter<"Recipeinformation"> | string
    ingredients?: StringWithAggregatesFilter<"Recipeinformation"> | string
    steps?: StringWithAggregatesFilter<"Recipeinformation"> | string
    nutrition?: StringWithAggregatesFilter<"Recipeinformation"> | string
  }

  export type ExercisesWhereInput = {
    AND?: ExercisesWhereInput | ExercisesWhereInput[]
    OR?: ExercisesWhereInput[]
    NOT?: ExercisesWhereInput | ExercisesWhereInput[]
    id?: StringFilter<"Exercises"> | string
    exercise?: StringFilter<"Exercises"> | string
    image?: StringFilter<"Exercises"> | string
  }

  export type ExercisesOrderByWithRelationInput = {
    id?: SortOrder
    exercise?: SortOrder
    image?: SortOrder
  }

  export type ExercisesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExercisesWhereInput | ExercisesWhereInput[]
    OR?: ExercisesWhereInput[]
    NOT?: ExercisesWhereInput | ExercisesWhereInput[]
    exercise?: StringFilter<"Exercises"> | string
    image?: StringFilter<"Exercises"> | string
  }, "id">

  export type ExercisesOrderByWithAggregationInput = {
    id?: SortOrder
    exercise?: SortOrder
    image?: SortOrder
    _count?: ExercisesCountOrderByAggregateInput
    _max?: ExercisesMaxOrderByAggregateInput
    _min?: ExercisesMinOrderByAggregateInput
  }

  export type ExercisesScalarWhereWithAggregatesInput = {
    AND?: ExercisesScalarWhereWithAggregatesInput | ExercisesScalarWhereWithAggregatesInput[]
    OR?: ExercisesScalarWhereWithAggregatesInput[]
    NOT?: ExercisesScalarWhereWithAggregatesInput | ExercisesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exercises"> | string
    exercise?: StringWithAggregatesFilter<"Exercises"> | string
    image?: StringWithAggregatesFilter<"Exercises"> | string
  }

  export type ExerciseinformationWhereInput = {
    AND?: ExerciseinformationWhereInput | ExerciseinformationWhereInput[]
    OR?: ExerciseinformationWhereInput[]
    NOT?: ExerciseinformationWhereInput | ExerciseinformationWhereInput[]
    id?: StringFilter<"Exerciseinformation"> | string
    exercise?: StringFilter<"Exerciseinformation"> | string
    videolink?: StringFilter<"Exerciseinformation"> | string
  }

  export type ExerciseinformationOrderByWithRelationInput = {
    id?: SortOrder
    exercise?: SortOrder
    videolink?: SortOrder
  }

  export type ExerciseinformationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExerciseinformationWhereInput | ExerciseinformationWhereInput[]
    OR?: ExerciseinformationWhereInput[]
    NOT?: ExerciseinformationWhereInput | ExerciseinformationWhereInput[]
    exercise?: StringFilter<"Exerciseinformation"> | string
    videolink?: StringFilter<"Exerciseinformation"> | string
  }, "id">

  export type ExerciseinformationOrderByWithAggregationInput = {
    id?: SortOrder
    exercise?: SortOrder
    videolink?: SortOrder
    _count?: ExerciseinformationCountOrderByAggregateInput
    _max?: ExerciseinformationMaxOrderByAggregateInput
    _min?: ExerciseinformationMinOrderByAggregateInput
  }

  export type ExerciseinformationScalarWhereWithAggregatesInput = {
    AND?: ExerciseinformationScalarWhereWithAggregatesInput | ExerciseinformationScalarWhereWithAggregatesInput[]
    OR?: ExerciseinformationScalarWhereWithAggregatesInput[]
    NOT?: ExerciseinformationScalarWhereWithAggregatesInput | ExerciseinformationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Exerciseinformation"> | string
    exercise?: StringWithAggregatesFilter<"Exerciseinformation"> | string
    videolink?: StringWithAggregatesFilter<"Exerciseinformation"> | string
  }

  export type UserCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    login_attempts?: number
    locked_until?: Date | string | null
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    login_attempts?: number
    locked_until?: Date | string | null
  }

  export type UserUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login_attempts?: IntFieldUpdateOperationsInput | number
    locked_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login_attempts?: IntFieldUpdateOperationsInput | number
    locked_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: string
    firstname: string
    lastname: string
    email: string
    password: string
    login_attempts?: number
    locked_until?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login_attempts?: IntFieldUpdateOperationsInput | number
    locked_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    firstname?: StringFieldUpdateOperationsInput | string
    lastname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    login_attempts?: IntFieldUpdateOperationsInput | number
    locked_until?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RecipesCreateInput = {
    id?: string
    recipename: string
    image: string
  }

  export type RecipesUncheckedCreateInput = {
    id?: string
    recipename: string
    image: string
  }

  export type RecipesUpdateInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type RecipesUncheckedUpdateInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type RecipesCreateManyInput = {
    id?: string
    recipename: string
    image: string
  }

  export type RecipesUpdateManyMutationInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type RecipesUncheckedUpdateManyInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeinformationCreateInput = {
    id?: string
    recipename: string
    ingredients: string
    steps: string
    nutrition: string
  }

  export type RecipeinformationUncheckedCreateInput = {
    id?: string
    recipename: string
    ingredients: string
    steps: string
    nutrition: string
  }

  export type RecipeinformationUpdateInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    nutrition?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeinformationUncheckedUpdateInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    nutrition?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeinformationCreateManyInput = {
    id?: string
    recipename: string
    ingredients: string
    steps: string
    nutrition: string
  }

  export type RecipeinformationUpdateManyMutationInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    nutrition?: StringFieldUpdateOperationsInput | string
  }

  export type RecipeinformationUncheckedUpdateManyInput = {
    recipename?: StringFieldUpdateOperationsInput | string
    ingredients?: StringFieldUpdateOperationsInput | string
    steps?: StringFieldUpdateOperationsInput | string
    nutrition?: StringFieldUpdateOperationsInput | string
  }

  export type ExercisesCreateInput = {
    id?: string
    exercise: string
    image: string
  }

  export type ExercisesUncheckedCreateInput = {
    id?: string
    exercise: string
    image: string
  }

  export type ExercisesUpdateInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ExercisesUncheckedUpdateInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ExercisesCreateManyInput = {
    id?: string
    exercise: string
    image: string
  }

  export type ExercisesUpdateManyMutationInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ExercisesUncheckedUpdateManyInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseinformationCreateInput = {
    id?: string
    exercise: string
    videolink: string
  }

  export type ExerciseinformationUncheckedCreateInput = {
    id?: string
    exercise: string
    videolink: string
  }

  export type ExerciseinformationUpdateInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    videolink?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseinformationUncheckedUpdateInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    videolink?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseinformationCreateManyInput = {
    id?: string
    exercise: string
    videolink: string
  }

  export type ExerciseinformationUpdateManyMutationInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    videolink?: StringFieldUpdateOperationsInput | string
  }

  export type ExerciseinformationUncheckedUpdateManyInput = {
    exercise?: StringFieldUpdateOperationsInput | string
    videolink?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login_attempts?: SortOrder
    locked_until?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    login_attempts?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login_attempts?: SortOrder
    locked_until?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstname?: SortOrder
    lastname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    login_attempts?: SortOrder
    locked_until?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    login_attempts?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type RecipesCountOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    image?: SortOrder
  }

  export type RecipesMaxOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    image?: SortOrder
  }

  export type RecipesMinOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    image?: SortOrder
  }

  export type RecipeinformationCountOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    ingredients?: SortOrder
    steps?: SortOrder
    nutrition?: SortOrder
  }

  export type RecipeinformationMaxOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    ingredients?: SortOrder
    steps?: SortOrder
    nutrition?: SortOrder
  }

  export type RecipeinformationMinOrderByAggregateInput = {
    id?: SortOrder
    recipename?: SortOrder
    ingredients?: SortOrder
    steps?: SortOrder
    nutrition?: SortOrder
  }

  export type ExercisesCountOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    image?: SortOrder
  }

  export type ExercisesMaxOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    image?: SortOrder
  }

  export type ExercisesMinOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    image?: SortOrder
  }

  export type ExerciseinformationCountOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    videolink?: SortOrder
  }

  export type ExerciseinformationMaxOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    videolink?: SortOrder
  }

  export type ExerciseinformationMinOrderByAggregateInput = {
    id?: SortOrder
    exercise?: SortOrder
    videolink?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipesDefaultArgs instead
     */
    export type RecipesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RecipesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RecipeinformationDefaultArgs instead
     */
    export type RecipeinformationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = RecipeinformationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExercisesDefaultArgs instead
     */
    export type ExercisesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExercisesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExerciseinformationDefaultArgs instead
     */
    export type ExerciseinformationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ExerciseinformationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}